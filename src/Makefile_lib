###########################################
#Makefile for simple programs
###########################################
CC=gcc
CXX=g++
LINK=g++
C_STATIC=ar

#-fpermissive：表示兼容老语法
COM_FLAGS= -g -Wall 
SO_FLAGS=-fPIC
SO_LINK_FLAG=-shared
A_LINK_FLAG=-q
S_FLAGS= -fpermissive
C_FLAGS=  -std=c11
CXX_FLAGS= -std=c++11
INC_PATH= -I ../include
EXT_LIB=-L ../lib -luuid -liniparser -luchardet -lcrypto -ldl -lpthread

LIB_A=libgunity.a
LIB_SO=libgunity.so

SRCS=$(wildcard *.c)
SRCS+=$(wildcard *.cpp)

C_OBJS=$(patsubst %.c,%.o,$(wildcard *.c))
CXX_OBJS=$(patsubst %.cpp,%.o,$(wildcard *.cpp))

all:$(LIB_SO) $(LIB_A)

#编译动态库
$(LIB_SO):$(CXX_OBJS) $(C_OBJS)
	$(CXX) $^ $(EXT_LIB) $(SO_LINK_FLAG) -o $@

#编译静态库
$(LIB_A):$(CXX_OBJS) $(C_OBJS)
	@echo -e "CREATE $@\n SAVE\n END" | ar -M
	$(C_STATIC) $(A_LINK_FLAG) $@ $^
	@echo -e "OPEN $@\n ADDLIB ../lib/libcrypto.a\n ADDLIB ../lib/libiniparser.a\n ADDLIB ../lib/libuchardet.a\n ADDLIB ../lib/libuuid.a\n SAVE\n END" | ar -M

#编译的时候需要头文件
%.o:%.cpp
	$(CXX) $(COM_FLAGS) $(CXX_FLAGS) $(SO_FLAGS) -c $< $(INC_PATH) -o $@

%.o:%.c
	$(CC) $(COM_FLAGS) $(SO_FLAGS) -c $< $(INC_PATH) -o $@

.PRONY:clean
clean:
	@echo "Removing linked and compiled files......"
	rm -rf $(PRG) $(CXX_OBJS) $(C_OBJS)
